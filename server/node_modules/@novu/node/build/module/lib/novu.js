import axios from 'axios';
import { Subscribers } from './subscribers/subscribers';
import { EventEmitter } from 'events';
export class Novu extends EventEmitter {
    constructor(apiKey, config) {
        super();
        this.apiKey = apiKey;
        this.http = axios.create({
            baseURL: this.buildBackendUrl(config),
            headers: {
                Authorization: `ApiKey ${this.apiKey}`,
            },
        });
        this.subscribers = new Subscribers(this.http);
    }
    async trigger(eventId, data) {
        return await this.http.post(`/events/trigger`, {
            name: eventId,
            to: data.to,
            payload: {
                ...data?.payload,
            },
            overrides: data.overrides || {},
        });
    }
    async broadcast(eventId, data) {
        return await this.http.post(`/events/trigger/broadcast`, {
            name: eventId,
            payload: {
                ...data?.payload,
            },
            overrides: data.overrides || {},
        });
    }
    buildBackendUrl(config) {
        const novuVersion = 'v1';
        if (!config?.backendUrl) {
            return `https://api.novu.co/${novuVersion}`;
        }
        return config?.backendUrl.includes('novu.co/v')
            ? config?.backendUrl
            : config?.backendUrl + `/${novuVersion}`;
    }
}
