/// <reference types="node" />
import { ChannelTypeEnum, DigestUnitEnum } from '@novu/shared';
export interface IChannelCredentials {
    webhookUrl?: string;
    deviceTokens?: string[];
}
export interface ISubscribers {
    identify(subscriberId: string, data: ISubscriberPayload): any;
    update(subscriberId: string, data: ISubscriberPayload): any;
    delete(subscriberId: string): any;
    setCredentials(subscriberId: string, providerId: string, credentials: IChannelCredentials): any;
}
export interface ISubscriberPayload {
    firstName?: string;
    lastName?: string;
    email?: string;
    phone?: string;
    avatar?: string;
    [key: string]: string | string[] | boolean | number | undefined;
}
export interface ISubscribersDefine extends ISubscriberPayload {
    subscriberId: string;
}
export interface IUpdateSubscriberPreferencePayload {
    channel?: {
        type: ChannelTypeEnum;
        enabled: boolean;
    };
    enabled?: boolean;
}
export declare type TriggerRecipientsTypeArray = string[] | ISubscribersDefine[];
export declare type TriggerRecipientsTypeSingle = string | ISubscribersDefine;
export declare type TriggerRecipientsType = TriggerRecipientsTypeSingle | TriggerRecipientsTypeArray;
export interface ITriggerPayloadOptions extends IBroadcastPayloadOptions {
    to: TriggerRecipientsType;
}
export interface IBroadcastPayloadOptions {
    payload: ITriggerPayload;
    overrides?: ITriggerOverrides;
}
export interface ITriggerPayload {
    attachments?: IAttachmentOptions[];
    [key: string]: string | string[] | boolean | number | undefined | IAttachmentOptions | IAttachmentOptions[] | Record<string, unknown>;
}
export declare type ITriggerOverrides = {
    [key in 'emailjs' | 'mailgun' | 'nodemailer' | 'plivo' | 'postmark' | 'sendgrid' | 'twilio']: object;
} & {
    [key in 'fcm']: ITriggerOverrideFCM;
} & {
    [key in 'delay']: ITriggerOverrideDelayAction;
};
export declare type ITriggerOverrideDelayAction = {
    unit: DigestUnitEnum;
    amount: number;
};
export declare type ITriggerOverrideFCM = {
    tag?: string;
    body?: string;
    icon?: string;
    badge?: string;
    color?: string;
    sound?: string;
    title?: string;
    bodyLocKey?: string;
    bodyLocArgs?: string;
    clickAction?: string;
    titleLocKey?: string;
    titleLocArgs?: string;
};
export interface IAttachmentOptions {
    mime: string;
    file: Buffer;
    name?: string;
    channels?: ChannelTypeEnum[];
}
export interface IUpdateSubscriberPreferencePayload {
    channel?: {
        type: ChannelTypeEnum;
        enabled: boolean;
    };
    enabled?: boolean;
}
//# sourceMappingURL=subscriber.interface.d.ts.map